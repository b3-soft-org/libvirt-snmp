Simple SNMP subagent for libvirt
================================

Changelog:
 - reworked the libvirtGuestTable indexing - now it is indexed by UUID instead of ID of the domain, allowing admins to create and destroy guests
 - added example SNMP SET operation to pause and resume a guest, see examples below

File structure:
---------------
LIBVIRT-MIB.txt
- the most important file, defines libvirt MIB. It tells network management systems what information can they get from a managed device (=libvirt host), what does it mean and how to manage the device.
- although the syntax is ugly, it should be pretty readable, please review carefully, namely the types, limits (0..4294967295 etc) and descriptions.
- don't worry about MAX-ACCESS (read-write/read-create), I'll think about this later. The goal is to be able to create new domain based on UUID or its name, destroy a domain and maybe set something (see TODOs below).
- don't worry about libvirtCompliances and libvirtGroups and below, it's stupid bureaucratic stuff.
- feel free to rename anything, I've used 'guest', you may prefer 'domain' or so.
- this file is not set to the stone yet, but it will be once it is released.
- please apply for OID at http://pen.iana.org/pen/PenApplication.page !!!


libvirtSnmp.c, libvirtSnmp.h
- the 'real' code, it loads list of domains and fills them into net-snmp friendly container. All other files are just for integration of the container into SNMP :).
- based on Dave Allan's activeguests.c
- enhanced with creation/destruction of guests

libvirtMib_subagent.c
- Simple SNMP AgentX subagent, i.e. small daemon which connects to SNMP master agent (=snmpd) and provides libvirtMIB.
- It's generated.

libvirtGuestTable*
- The SNMP stuff :).
- Generated by this command: 'MIBDIRS="+." MIBS="+LIBVIRT-MIB" mib2c libvirtMIB'.
  - It asks few questions and produces the mentioned files.
- libvirtGuestTable.h, libvirtGuestTable.c, libvirtGuestTable_data_access.c, libvirtGuestTable_data_get.c and libvirtGuestTable_data_set.c are manually edited to set correct data structures and their handling. It's nicely documented, see libvirtGuestTable-README-FIRST.txt and libvirtGuestTable-README-libvirtGuestTable.txt + TODOs in the code. It took me ~2 hours to update these files (but I've done this several times for different MIBs, so I know what to do :). Do not touch the rest of the files!

libvirtNotifications.[c|h]
- The SNMP trap (notification) stuff
- Generated by this command: 'MIBDIRS="+." MIBS="+LIBVIRT-MIB" mib2c -c mib2c.notify.conf libvirtNotifications'
- and slightly modified (especially filling up trap variables which are going to be send).


Usage (tested on Fedora 14 and RHEL6)
-------------------------------------
1. install dependencies
$ yum install net-snmp-perl net-snmp net-snmp-utils net-snmp-devel libvirt-devel
$ make

2. use following /etc/snmp/snmpd.conf:
rwcommunity public
master agentx

3. service snmpd start

4. start the libvirtMib_subagent:
$ ./libvirtMib_subagent -f -L
NET-SNMP version 5.5 AgentX subagent connected

5. that's it, now check that it works as expected, i.e. read the values provided by the subagent
$ export MIBDIRS="+<directory with the LIBVIRT-MIB.txt file>" MIBS="+LIBVIRT-MIB"
$ snmpwalk localhost libvirtMIB
LIBVIRT-MIB::libvirtGuestName.'J._<.....@P...m.' = STRING: "rhel5"
LIBVIRT-MIB::libvirtGuestName.'.......r....r-..' = STRING: "f13"
LIBVIRT-MIB::libvirtGuestName.'.5w..f.....pF..S' = STRING: "f14"
...
(the '.5w..f.....pF..' string is 16-byte long uuid, I don't know how to tell snmpwalk to display it in nice string format)

$ snmptable -Cb localhost libvirtGuestTable
SNMP table: LIBVIRT-MIB::libvirtGuestTable

    Name   State CpuCount MemoryCurrent MemoryLimit      CpuTime RowStatus
 "rhel5" running        1           512         512 438960000000    active
   "f13" running        1           512         512  16300000000    active
   "f14" running        1           512         512  18720000000    active


Now it is possible to set state of machine (running->paused, paused->running and running->shutdown):
# assuming 4ac85f3c-9f18-e091-d940-50be09db6d17 is UUID of running machine (note the backslash below!)
$ snmpset localhost libvirtGuestState.\'4ac85f3c-9f18-e091-d940-50be09db6d17\' = paused

# assuming 4ac85f3c-9f18-e091-d940-50be09db6d17 now paused
$ snmpset localhost libvirtGuestState.\'4ac85f3c-9f18-e091-d940-50be09db6d17\' = running
$ snmpset localhost libvirtGuestState.\'4ac85f3c-9f18-e091-d940-50be09db6d17\' = shutdown
# (it takes some time to shutdown the machine...)

In addition, it's possible to create or destroy a virtual machine knowing its UUID
# create the machine
$ snmpset localhost libvirtGuestRowStatus.\'4ac85f3c-9f18-e091-d940-50be09db6d17\' = createAndGo
# destroy the machine
$ snmpset localhost libvirtGuestRowStatus.\'4ac85f3c-9f18-e091-d940-50be09db6d17\' = destroy


TODO items
----------
Jan:
- Clean up the code.

libvirt:
- Please apply for OID at http://pen.iana.org/pen/PenApplication.page !!!
- Please test it a bit
